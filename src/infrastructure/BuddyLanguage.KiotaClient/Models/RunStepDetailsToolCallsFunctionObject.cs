// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    internal class RunStepDetailsToolCallsFunctionObject : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The definition of the function that was called.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RunStepDetailsToolCallsFunctionObject_function? Function { get; set; }
#nullable restore
#else
        public RunStepDetailsToolCallsFunctionObject_function Function { get; set; }
#endif
        /// <summary>The ID of the tool call object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The type of tool call. This is always going to be `function` for this type of tool call.</summary>
        public RunStepDetailsToolCallsFunctionObject_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new RunStepDetailsToolCallsFunctionObject and sets the default values.
        /// </summary>
        public RunStepDetailsToolCallsFunctionObject() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RunStepDetailsToolCallsFunctionObject CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RunStepDetailsToolCallsFunctionObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"function", n => { Function = n.GetObjectValue<RunStepDetailsToolCallsFunctionObject_function>(RunStepDetailsToolCallsFunctionObject_function.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<RunStepDetailsToolCallsFunctionObject_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<RunStepDetailsToolCallsFunctionObject_function>("function", Function);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<RunStepDetailsToolCallsFunctionObject_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

