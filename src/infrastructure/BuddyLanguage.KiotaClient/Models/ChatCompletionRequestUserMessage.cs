// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    internal class ChatCompletionRequestUserMessage : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The contents of the user message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ChatCompletionRequestUserMessage_content? Content { get; set; }
#nullable restore
#else
        public ChatCompletionRequestUserMessage_content Content { get; set; }
#endif
        /// <summary>The role of the messages author, in this case `user`.</summary>
        public ChatCompletionRequestUserMessage_role? Role { get; set; }
        /// <summary>
        /// Instantiates a new ChatCompletionRequestUserMessage and sets the default values.
        /// </summary>
        public ChatCompletionRequestUserMessage() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChatCompletionRequestUserMessage CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ChatCompletionRequestUserMessage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"content", n => { Content = n.GetObjectValue<ChatCompletionRequestUserMessage_content>(ChatCompletionRequestUserMessage_content.CreateFromDiscriminatorValue); } },
                {"role", n => { Role = n.GetEnumValue<ChatCompletionRequestUserMessage_role>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ChatCompletionRequestUserMessage_content>("content", Content);
            writer.WriteEnumValue<ChatCompletionRequestUserMessage_role>("role", Role);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes ChatCompletionRequestMessageContentPart, TextContent
        /// </summary>
        internal class ChatCompletionRequestUserMessage_content : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type ChatCompletionRequestMessageContentPart</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestMessageContentPart? ChatCompletionRequestMessageContentPart { get; set; }
#nullable restore
#else
            public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestMessageContentPart ChatCompletionRequestMessageContentPart { get; set; }
#endif
            /// <summary>Composed type representation for type TextContent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public OpenAI.GeneratedKiotaClient.Models.TextContent? TextContent { get; set; }
#nullable restore
#else
            public OpenAI.GeneratedKiotaClient.Models.TextContent TextContent { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static ChatCompletionRequestUserMessage_content CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new ChatCompletionRequestUserMessage_content();
                if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.ChatCompletionRequestMessageContentPart = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestMessageContentPart();
                }
                else if("".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.TextContent = new OpenAI.GeneratedKiotaClient.Models.TextContent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                if(ChatCompletionRequestMessageContentPart != null) {
                    return ChatCompletionRequestMessageContentPart.GetFieldDeserializers();
                }
                else if(TextContent != null) {
                    return TextContent.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ChatCompletionRequestMessageContentPart != null) {
                    writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestMessageContentPart>(null, ChatCompletionRequestMessageContentPart);
                }
                else if(TextContent != null) {
                    writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.TextContent>(null, TextContent);
                }
            }
        }
    }
}

