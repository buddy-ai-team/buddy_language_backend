// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    /// <summary>
    /// A list of the categories along with their scores as predicted by model.
    /// </summary>
    internal class CreateModerationResponse_results_category_scores : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The score for the category &apos;harassment&apos;.</summary>
        public double? Harassment { get; set; }
        /// <summary>The score for the category &apos;harassment/threatening&apos;.</summary>
        public double? HarassmentThreatening { get; set; }
        /// <summary>The score for the category &apos;hate&apos;.</summary>
        public double? Hate { get; set; }
        /// <summary>The score for the category &apos;hate/threatening&apos;.</summary>
        public double? HateThreatening { get; set; }
        /// <summary>The score for the category &apos;self-harm&apos;.</summary>
        public double? SelfHarm { get; set; }
        /// <summary>The score for the category &apos;self-harm/instructions&apos;.</summary>
        public double? SelfHarmInstructions { get; set; }
        /// <summary>The score for the category &apos;self-harm/intent&apos;.</summary>
        public double? SelfHarmIntent { get; set; }
        /// <summary>The score for the category &apos;sexual&apos;.</summary>
        public double? Sexual { get; set; }
        /// <summary>The score for the category &apos;sexual/minors&apos;.</summary>
        public double? SexualMinors { get; set; }
        /// <summary>The score for the category &apos;violence&apos;.</summary>
        public double? Violence { get; set; }
        /// <summary>The score for the category &apos;violence/graphic&apos;.</summary>
        public double? ViolenceGraphic { get; set; }
        /// <summary>
        /// Instantiates a new CreateModerationResponse_results_category_scores and sets the default values.
        /// </summary>
        public CreateModerationResponse_results_category_scores() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateModerationResponse_results_category_scores CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateModerationResponse_results_category_scores();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"harassment", n => { Harassment = n.GetDoubleValue(); } },
                {"harassment/threatening", n => { HarassmentThreatening = n.GetDoubleValue(); } },
                {"hate", n => { Hate = n.GetDoubleValue(); } },
                {"hate/threatening", n => { HateThreatening = n.GetDoubleValue(); } },
                {"self-harm", n => { SelfHarm = n.GetDoubleValue(); } },
                {"self-harm/instructions", n => { SelfHarmInstructions = n.GetDoubleValue(); } },
                {"self-harm/intent", n => { SelfHarmIntent = n.GetDoubleValue(); } },
                {"sexual", n => { Sexual = n.GetDoubleValue(); } },
                {"sexual/minors", n => { SexualMinors = n.GetDoubleValue(); } },
                {"violence", n => { Violence = n.GetDoubleValue(); } },
                {"violence/graphic", n => { ViolenceGraphic = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("harassment", Harassment);
            writer.WriteDoubleValue("harassment/threatening", HarassmentThreatening);
            writer.WriteDoubleValue("hate", Hate);
            writer.WriteDoubleValue("hate/threatening", HateThreatening);
            writer.WriteDoubleValue("self-harm", SelfHarm);
            writer.WriteDoubleValue("self-harm/instructions", SelfHarmInstructions);
            writer.WriteDoubleValue("self-harm/intent", SelfHarmIntent);
            writer.WriteDoubleValue("sexual", Sexual);
            writer.WriteDoubleValue("sexual/minors", SexualMinors);
            writer.WriteDoubleValue("violence", Violence);
            writer.WriteDoubleValue("violence/graphic", ViolenceGraphic);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

