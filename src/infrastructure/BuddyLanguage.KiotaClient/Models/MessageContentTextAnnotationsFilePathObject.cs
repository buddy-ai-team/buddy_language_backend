// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    /// <summary>
    /// A URL for the file that&apos;s generated when the assistant used the `code_interpreter` tool to generate a file.
    /// </summary>
    internal class MessageContentTextAnnotationsFilePathObject : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The end_index property</summary>
        public int? EndIndex { get; set; }
        /// <summary>The file_path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MessageContentTextAnnotationsFilePathObject_file_path? FilePath { get; set; }
#nullable restore
#else
        public MessageContentTextAnnotationsFilePathObject_file_path FilePath { get; set; }
#endif
        /// <summary>The start_index property</summary>
        public int? StartIndex { get; set; }
        /// <summary>The text in the message content that needs to be replaced.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>Always `file_path`.</summary>
        public MessageContentTextAnnotationsFilePathObject_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new MessageContentTextAnnotationsFilePathObject and sets the default values.
        /// </summary>
        public MessageContentTextAnnotationsFilePathObject() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MessageContentTextAnnotationsFilePathObject CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MessageContentTextAnnotationsFilePathObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"end_index", n => { EndIndex = n.GetIntValue(); } },
                {"file_path", n => { FilePath = n.GetObjectValue<MessageContentTextAnnotationsFilePathObject_file_path>(MessageContentTextAnnotationsFilePathObject_file_path.CreateFromDiscriminatorValue); } },
                {"start_index", n => { StartIndex = n.GetIntValue(); } },
                {"text", n => { Text = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<MessageContentTextAnnotationsFilePathObject_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("end_index", EndIndex);
            writer.WriteObjectValue<MessageContentTextAnnotationsFilePathObject_file_path>("file_path", FilePath);
            writer.WriteIntValue("start_index", StartIndex);
            writer.WriteStringValue("text", Text);
            writer.WriteEnumValue<MessageContentTextAnnotationsFilePathObject_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

