// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    /// <summary>
    /// Composed type wrapper for classes ChatCompletionRequestAssistantMessage, ChatCompletionRequestFunctionMessage, ChatCompletionRequestSystemMessage, ChatCompletionRequestToolMessage, ChatCompletionRequestUserMessage
    /// </summary>
    internal class ChatCompletionRequestMessage : IComposedTypeWrapper, IParsable {
        /// <summary>Composed type representation for type ChatCompletionRequestAssistantMessage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestAssistantMessage? ChatCompletionRequestAssistantMessage { get; set; }
#nullable restore
#else
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestAssistantMessage ChatCompletionRequestAssistantMessage { get; set; }
#endif
        /// <summary>Composed type representation for type ChatCompletionRequestFunctionMessage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestFunctionMessage? ChatCompletionRequestFunctionMessage { get; set; }
#nullable restore
#else
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestFunctionMessage ChatCompletionRequestFunctionMessage { get; set; }
#endif
        /// <summary>Composed type representation for type ChatCompletionRequestSystemMessage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestSystemMessage? ChatCompletionRequestSystemMessage { get; set; }
#nullable restore
#else
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestSystemMessage ChatCompletionRequestSystemMessage { get; set; }
#endif
        /// <summary>Composed type representation for type ChatCompletionRequestToolMessage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestToolMessage? ChatCompletionRequestToolMessage { get; set; }
#nullable restore
#else
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestToolMessage ChatCompletionRequestToolMessage { get; set; }
#endif
        /// <summary>Composed type representation for type ChatCompletionRequestUserMessage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestUserMessage? ChatCompletionRequestUserMessage { get; set; }
#nullable restore
#else
        public OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestUserMessage ChatCompletionRequestUserMessage { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ChatCompletionRequestMessage CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
            var result = new ChatCompletionRequestMessage();
            if("ChatCompletionRequestAssistantMessage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.ChatCompletionRequestAssistantMessage = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestAssistantMessage();
            }
            else if("ChatCompletionRequestFunctionMessage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.ChatCompletionRequestFunctionMessage = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestFunctionMessage();
            }
            else if("ChatCompletionRequestSystemMessage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.ChatCompletionRequestSystemMessage = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestSystemMessage();
            }
            else if("ChatCompletionRequestToolMessage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.ChatCompletionRequestToolMessage = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestToolMessage();
            }
            else if("ChatCompletionRequestUserMessage".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                result.ChatCompletionRequestUserMessage = new OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestUserMessage();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            if(ChatCompletionRequestAssistantMessage != null) {
                return ChatCompletionRequestAssistantMessage.GetFieldDeserializers();
            }
            else if(ChatCompletionRequestFunctionMessage != null) {
                return ChatCompletionRequestFunctionMessage.GetFieldDeserializers();
            }
            else if(ChatCompletionRequestSystemMessage != null) {
                return ChatCompletionRequestSystemMessage.GetFieldDeserializers();
            }
            else if(ChatCompletionRequestToolMessage != null) {
                return ChatCompletionRequestToolMessage.GetFieldDeserializers();
            }
            else if(ChatCompletionRequestUserMessage != null) {
                return ChatCompletionRequestUserMessage.GetFieldDeserializers();
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(ChatCompletionRequestAssistantMessage != null) {
                writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestAssistantMessage>(null, ChatCompletionRequestAssistantMessage);
            }
            else if(ChatCompletionRequestFunctionMessage != null) {
                writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestFunctionMessage>(null, ChatCompletionRequestFunctionMessage);
            }
            else if(ChatCompletionRequestSystemMessage != null) {
                writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestSystemMessage>(null, ChatCompletionRequestSystemMessage);
            }
            else if(ChatCompletionRequestToolMessage != null) {
                writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestToolMessage>(null, ChatCompletionRequestToolMessage);
            }
            else if(ChatCompletionRequestUserMessage != null) {
                writer.WriteObjectValue<OpenAI.GeneratedKiotaClient.Models.ChatCompletionRequestUserMessage>(null, ChatCompletionRequestUserMessage);
            }
        }
    }
}

