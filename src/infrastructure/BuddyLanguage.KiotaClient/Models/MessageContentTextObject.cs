// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenAI.GeneratedKiotaClient.Models {
    /// <summary>
    /// The text content that is part of a message.
    /// </summary>
    internal class MessageContentTextObject : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MessageContentTextObject_text? Text { get; set; }
#nullable restore
#else
        public MessageContentTextObject_text Text { get; set; }
#endif
        /// <summary>Always `text`.</summary>
        public MessageContentTextObject_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new MessageContentTextObject and sets the default values.
        /// </summary>
        public MessageContentTextObject() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MessageContentTextObject CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MessageContentTextObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"text", n => { Text = n.GetObjectValue<MessageContentTextObject_text>(MessageContentTextObject_text.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<MessageContentTextObject_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MessageContentTextObject_text>("text", Text);
            writer.WriteEnumValue<MessageContentTextObject_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

