// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenAI.ChatGpt.EntityFrameworkCore;

#nullable disable

namespace BuddyLanguage.Infrastructure.Migrations
{
    [DbContext(typeof(ChatGptDbContext))]
    partial class ChatGptDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenAI.ChatGpt.Models.PersistentChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OpenAI.ChatGpt.Models.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("OpenAI.ChatGpt.Models.Topic", b =>
                {
                    b.OwnsOne("OpenAI.ChatGpt.Models.ChatGPTConfig", "Config", b1 =>
                        {
                            b1.Property<Guid>("TopicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InitialSystemMessage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("InitialUserMessage")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("MaxTokens")
                                .HasColumnType("int");

                            b1.Property<string>("Model")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("PassUserIdToOpenAiRequests")
                                .HasColumnType("bit");

                            b1.Property<float?>("Temperature")
                                .HasColumnType("real");

                            b1.HasKey("TopicId");

                            b1.ToTable("Topics");

                            b1.WithOwner()
                                .HasForeignKey("TopicId");
                        });

                    b.Navigation("Config")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
